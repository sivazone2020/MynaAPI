name: MynaAPI - Azure Container Apps Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AZURE_SUBSCRIPTION_ID: e584d9a6-2115-4a9b-a5d4-3d1948b95377
  PROJECT_NAME: mynaapi
  AZURE_LOCATION: eastus

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Basic syntax check
      run: |
        python -m py_compile app/main.py
        echo "Basic syntax check passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.PROJECT_NAME }}${{ github.event.inputs.environment || 'dev' }}acr.azurecr.io
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.PROJECT_NAME }}${{ github.event.inputs.environment || 'dev' }}acr.azurecr.io/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ github.sha }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-container
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    outputs:
      container-app-url: ${{ steps.deploy.outputs.container-app-url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set environment variables
      run: |
        if [ "${{ github.event.inputs.environment }}" = "prod" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.PROJECT_NAME }}-prod-rg" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.PROJECT_NAME }}-dev-rg" >> $GITHUB_ENV
        fi
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
          
    - name: Deploy ARM Template
      id: deploy
      run: |
        deployment_name="${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-$(date +%Y%m%d-%H%M%S)"
        
        # Update parameters file with secrets
        jq '.parameters.openaiApiKey.value = "${{ secrets.OPENAI_API_KEY }}"' \
           deployment/azure/parameters-${{ env.ENVIRONMENT }}.json > temp_params.json
        jq '.parameters.pineconeApiKey.value = "${{ secrets.PINECONE_API_KEY }}"' \
           temp_params.json > temp_params2.json
        jq '.parameters.pineconeHost.value = "${{ secrets.PINECONE_HOST }}"' \
           temp_params2.json > temp_params3.json
        jq '.parameters.jwtSecretKey.value = "${{ secrets.JWT_SECRET_KEY }}"' \
           temp_params3.json > final_params.json
        
        # Deploy infrastructure
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file deployment/azure/main.json \
          --parameters @final_params.json \
          --name $deployment_name \
          --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
          
        # Get outputs
        container_app_url=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name $deployment_name \
          --query "properties.outputs.containerAppUrl.value" \
          --output tsv)
          
        echo "container-app-url=$container_app_url" >> $GITHUB_OUTPUT
        
        # Clean up temporary files
        rm -f temp_params*.json final_params.json

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-container, deploy-infrastructure]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set environment variables
      run: |
        if [ "${{ github.event.inputs.environment }}" = "prod" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.PROJECT_NAME }}-prod-rg" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.PROJECT_NAME }}-dev-rg" >> $GITHUB_ENV
        fi
        
    - name: Update Container App
      run: |
        container_app_name="${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-app"
        registry_name="${{ env.PROJECT_NAME }}${{ env.ENVIRONMENT }}acr"
        image_name="${{ env.PROJECT_NAME }}:${{ github.sha }}"
        full_image_name="${registry_name}.azurecr.io/${image_name}"
        
        az containerapp update \
          --name $container_app_name \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image $full_image_name \
          --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health Check
      run: |
        app_url="${{ needs.deploy-infrastructure.outputs.container-app-url }}"
        echo "Testing health endpoint: $app_url/health"
        
        # Wait for app to be ready (max 5 minutes)
        for i in {1..30}; do
          if curl -f "$app_url/health" > /dev/null 2>&1; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i: Health check failed, retrying in 10s..."
          sleep 10
        done
        
        # Final health check
        curl -f "$app_url/health" || exit 1
        
    - name: API Endpoint Tests
      run: |
        app_url="${{ needs.deploy-infrastructure.outputs.container-app-url }}"
        
        # Test API documentation endpoint
        echo "Testing API docs endpoint: $app_url/docs"
        curl -f "$app_url/docs" > /dev/null
        
        echo "Smoke tests completed successfully!"

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application, smoke-tests]
    if: failure() && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Cleanup Failed Deployment
      run: |
        if [ "${{ github.event.inputs.environment }}" = "prod" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          resource_group="${{ env.PROJECT_NAME }}-prod-rg"
        else
          resource_group="${{ env.PROJECT_NAME }}-dev-rg"
        fi
        
        echo "Deployment failed. Consider manual cleanup of resource group: $resource_group"
        # Uncomment the following line if you want automatic cleanup on failure
        # az group delete --name $resource_group --yes --no-wait
